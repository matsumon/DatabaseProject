[{"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\index.js":"1","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\reportWebVitals.js":"2","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\LogIn.js":"3","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\User.js":"4","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Session.js":"5","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Role.js":"6","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Credential.js":"7","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Action.js":"8"},{"size":1278,"mtime":1612429024384,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1611369906385,"results":"11","hashOfConfig":"10"},{"size":1729,"mtime":1612429034296,"results":"12","hashOfConfig":"10"},{"size":4903,"mtime":1612428112626,"results":"13","hashOfConfig":"10"},{"size":6666,"mtime":1612428216001,"results":"14","hashOfConfig":"10"},{"size":4503,"mtime":1612428388800,"results":"15","hashOfConfig":"10"},{"size":7492,"mtime":1612429450265,"results":"16","hashOfConfig":"10"},{"size":11352,"mtime":1612430402525,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ewx2r1",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\index.js",[],["38","39"],"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\reportWebVitals.js",[],["40","41"],"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\LogIn.js",["42","43","44"],"import { Input, Button, Card, Select } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { Option } = Select;\r\n\r\nfunction LogIn() {\r\n  let history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [userRole, setUserRole] = useState(\"\");\r\n  function handleLogIn() {\r\n    history.push(\"/Users\");\r\n    console.log(history);\r\n  }\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <Card\r\n        title=\"Log In\"\r\n        bordered={false}\r\n        style={{ width: \"200px\", height: \"auto\", margin: \"auto\" }}\r\n      >\r\n        <p>\r\n          <Input\r\n            placeholder=\"Username\"\r\n            onChange={(input) => {\r\n              setUsername(input.currentTarget.value);\r\n            }}\r\n            style={{ maxWidth: 200, margin: \"auto\" }}\r\n          />\r\n        </p>\r\n        <p>\r\n          <Input\r\n            placeholder=\"Password\"\r\n            onChange={(input) => {\r\n              setPassword(input.currentTarget.value);\r\n            }}\r\n            style={{ maxWidth: 200, margin: \"auto\" }}\r\n          />\r\n        </p>\r\n        <p>\r\n          <Select\r\n            defaultValue=\"Basic\"\r\n            style={{ width: 120 }}\r\n            onChange={(value) => {\r\n              setUserRole(value);\r\n            }}\r\n          >\r\n            <Option value=\"Basic\">Basic</Option>\r\n            <Option value=\"super\">Super</Option>\r\n          </Select>\r\n        </p>\r\n        <p>\r\n          <Button type=\"primary\" onClick={handleLogIn}>\r\n            Log In\r\n          </Button>\r\n        </p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogIn;\r\n","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\User.js",[],"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Session.js",[],"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Role.js",[],"C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Credential.js",["45"],"import {\r\n  Table,\r\n  Button,\r\n  Typography,\r\n  Input,\r\n  message,\r\n  DatePicker,\r\n  Card,\r\n  Select,\r\n} from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nfunction Credential() {\r\n  const { Column } = Table;\r\n  const { Option } = Select;\r\n  console.log(\"RENDER\");\r\n  const { Title } = Typography;\r\n  const history = useHistory();\r\n  const [userID, setUserID] = useState(\"\");\r\n  const [userIDAdd, setUserIDAdd] = useState(\"\");\r\n  const [hash, setHash] = useState(\"\");\r\n  const [expired, setExpired] = useState(\"\");\r\n  const [enabled, setEnabled] = useState(\"\");\r\n  const [created, setCreated] = useState(\"\");\r\n  // State variable to trigger a re-render of component\r\n  const [render, setRender] = useState(false);\r\n  /**\r\n   * This data is held in a state variable so that it wont reset every time the component\r\n   * is re-rendered. This data represents the current state of data in sql\r\n   */\r\n  const [rawData, setRawData] = useState([\r\n    {\r\n      id: 1,\r\n      userID: 3,\r\n      hash: \"112312312dsf\",\r\n      expired: \"1/2/21\",\r\n      enabled: \"true\",\r\n      created: \"2/2/12\",\r\n    },\r\n    {\r\n      id: 2,\r\n      userID: 2,\r\n      hash: \"asdfdas312dsf\",\r\n      expired: \"3/4/21\",\r\n      enabled: \"false\",\r\n      created: \"9/2/12\",\r\n    },\r\n    {\r\n      id: 3,\r\n      userID: 6,\r\n      hash: \"asdfsdaf32\",\r\n      expired: \"1/29/21\",\r\n      enabled: \"true\",\r\n      created: \"21/2/12\",\r\n    },\r\n  ]);\r\n  const userOptions = _.map(\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    (element, index) => {\r\n      return <Option key={index} value={element} label={element} />;\r\n    }\r\n  );\r\n  userOptions.push(\r\n    <Option key=\"key\" value={\"\"} label=\"Null\">\r\n      Null\r\n    </Option>\r\n  );\r\n  function handleSelectUserChange(value) {\r\n    console.log(value);\r\n    setUserIDAdd(value);\r\n  }\r\n  function handleSelectEditUserChange(value, id) {\r\n    console.log(value, id);\r\n    setUserID(value);\r\n  }\r\n  /**\r\n   * This function creates the data packet for antd's table. Because\r\n   * the table is having issues we have to set deleted rows to null.\r\n   */\r\n  function createDataSource() {\r\n    return _.map(rawData, (object, index) => {\r\n      return {\r\n        key: index,\r\n        id: object.id,\r\n        userID: (\r\n          <Select\r\n            style={{ width: \"65%\" }}\r\n            placeholder=\"User Id\"\r\n            onChange={(value) => {\r\n              handleSelectEditUserChange(value, object.id);\r\n            }}\r\n            defaultValue={object.userID.toString()}\r\n            optionLabelProp=\"label\"\r\n          >\r\n            {userOptions}\r\n          </Select>\r\n        ),\r\n        created: object.created,\r\n        enabled: object.enabled,\r\n        hash: object.hash,\r\n        expired: object.expired,\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * This function adds users to the table.\r\n   * Because react only does shallow checks on object, we have to manually\r\n   * retrigger a render using the render state variable. This isn't\r\n   * the best programming practice, but oh well.\r\n   */\r\n  function addCredentialToTable() {\r\n    if (enabled.length === 0 || created.length === 0 || expired.length === 0) {\r\n      message.error(\r\n        \"Enable Credential, Created Date or Expiration Date were not filled out\"\r\n      );\r\n      return;\r\n    }\r\n    let tempRawData = rawData;\r\n    tempRawData.push({\r\n      id: \"\",\r\n      userID: userIDAdd,\r\n      hash: hash,\r\n      expired: expired,\r\n      enabled: enabled,\r\n      created: created,\r\n    });\r\n    // setUserID(\"\");\r\n    // setUserIDAdd(\"Null\")\r\n    setHash(\"\");\r\n    setRawData(tempRawData);\r\n    setRender(!render);\r\n  }\r\n  let dataToBeUsed = [];\r\n  dataToBeUsed = createDataSource();\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <Card\r\n        style={{ margin: \"auto\", width: \"100%\" }}\r\n        title={\r\n          <Title style={{ margin: \"auto\", width: \"fit-content\" }}>\r\n            Credentials\r\n          </Title>\r\n        }\r\n      >\r\n        <p>\r\n          Users can make new credentials for any user with a user id, hash,\r\n          created date, expiration date, and whether to enable credential. User\r\n          ID and the hash are both optional with user id being nullable\r\n        </p>\r\n        <p>\r\n          Users can edit the user id, a foreign key to be anything including\r\n          null\r\n        </p>\r\n      </Card>\r\n      <div>\r\n        <Button\r\n          onClick={() => {\r\n            history.push(`/Users`);\r\n          }}\r\n        >\r\n          Users\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            history.push(`/Roles`);\r\n          }}\r\n        >\r\n          Roles\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            history.push(`/Actions`);\r\n          }}\r\n        >\r\n          Available Actions\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            history.push(`/Sessions`);\r\n          }}\r\n        >\r\n          Sessions\r\n        </Button>\r\n      </div>\r\n      <Table style={{ width: \"auto\" }} dataSource={dataToBeUsed}>\r\n        <Column title=\"ID\" dataIndex=\"id\" key=\"id\" />\r\n        <Column title=\"User ID\" dataIndex=\"userID\" key=\"userID\" />\r\n        <Column title=\"Hash\" dataIndex=\"hash\" key=\"hash\" />\r\n        <Column title=\"Created Date\" dataIndex=\"created\" key=\"created\" />\r\n        <Column title=\"Enabled\" dataIndex=\"enabled\" key=\"enabled\" />\r\n        <Column title=\"Expiration Date\" dataIndex=\"expired\" key=\"expired\" />\r\n      </Table>\r\n      <Card bordered style={{ width: 300 }}>\r\n        <div style={{ marginBottom: \"16px\" }}>\r\n          <Button size=\"large\" onClick={addCredentialToTable}>\r\n            Add Credential\r\n          </Button>\r\n        </div>\r\n        <Button style={{ width: \"35%\" }} disabled>\r\n          User ID\r\n        </Button>\r\n        <Select\r\n          style={{ width: \"65%\" }}\r\n          placeholder=\"User Id\"\r\n          value={userIDAdd}\r\n          onChange={(value) => {\r\n            handleSelectUserChange(value);\r\n          }}\r\n          optionLabelProp=\"label\"\r\n        >\r\n          {\" \"}\r\n          {userOptions}\r\n        </Select>\r\n        <Button style={{ width: \"35%\" }} disabled>\r\n          Hash\r\n        </Button>\r\n        <Input\r\n          style={{ width: \"65%\" }}\r\n          placeholder=\"Hash\"\r\n          value={hash}\r\n          onChange={(newValue) => {\r\n            setHash(newValue.currentTarget.value);\r\n          }}\r\n        />\r\n        <Button style={{ width: \"45%\" }} disabled>\r\n          Created Date\r\n        </Button>\r\n        <DatePicker\r\n          style={{ width: \"55%\" }}\r\n          placeholder=\"Created Date\"\r\n          onChange={(date, dateString) => {\r\n            setCreated(dateString);\r\n          }}\r\n        />\r\n        <Button style={{ width: \"50%\" }} disabled>\r\n          Enable Credential\r\n        </Button>\r\n        <Select\r\n          placeholder=\"Enable Credential\"\r\n          style={{ width: \"50%\" }}\r\n          onChange={(value) => setEnabled(value)}\r\n        >\r\n          <Option value=\"true\">True</Option>\r\n          <Option value=\"false\">False</Option>\r\n        </Select>\r\n        <Button style={{ width: \"50%\" }} disabled>\r\n          Expiration Date\r\n        </Button>\r\n        <DatePicker\r\n          style={{ width: \"50%\" }}\r\n          placeholder=\"Expiration Date\"\r\n          onChange={(date, dateString) => {\r\n            setExpired(dateString);\r\n          }}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Credential;\r\n","C:\\Users\\donts\\Desktop\\CS340-DBProject\\Frontend\\react\\src\\Action.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":11,"column":10,"nodeType":"54","messageId":"55","endLine":11,"endColumn":18},{"ruleId":"52","severity":1,"message":"56","line":12,"column":10,"nodeType":"54","messageId":"55","endLine":12,"endColumn":18},{"ruleId":"52","severity":1,"message":"57","line":13,"column":10,"nodeType":"54","messageId":"55","endLine":13,"endColumn":18},{"ruleId":"52","severity":1,"message":"58","line":22,"column":10,"nodeType":"54","messageId":"55","endLine":22,"endColumn":16},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'password' is assigned a value but never used.","'userRole' is assigned a value but never used.","'userID' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
